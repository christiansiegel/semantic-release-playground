branch: master
preset: conventionalcommits # https://www.conventionalcommits.org/
tagFormat: "v${version}"
plugins:
- "@semantic-release/commit-analyzer"
- "@semantic-release/release-notes-generator"
- - "@google/semantic-release-replace-plugin"
  - replacements:
    - files: [ "setup.py "]
      from: "version=\"dev\""
      to: "version=\"${nextRelease.version}\""
      countMatches: true
      results:
        - file: "setup.py"
          hasChanged: true
          numMatches: 1
          numReplacements: 1
- - "@semantic-release/exec"
  - verifyConditionsCmd: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    verifyReleaseCmd: |
      MAJOR_MINOR_PATCH=${/^((\d+)\.\d+)\.\d+$/.exec(nextRelease.version)}
      if [ -z $MAJOR_MINOR_PATCH ]; then echo "Only SemVer versions with version core (major.minor.patch) supported!"; exit 1; fi
    prepareCmd: docker build -t $IMAGE_NAME:latest .
    publishCmd: |
      MAJOR_MINOR_PATCH=${/^((\d+)\.\d+)\.\d+$/.exec(nextRelease.version)[0]}
      MAJOR_MINOR=${      /^((\d+)\.\d+)\.\d+$/.exec(nextRelease.version)[1]}
      MAJOR=${            /^((\d+)\.\d+)\.\d+$/.exec(nextRelease.version)[2]}
      docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR_MINOR_PATCH
      docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR_MINOR
      docker tag $IMAGE_NAME:latest $IMAGE_NAME:$MAJOR
      docker push $IMAGE_NAME:latest
      docker push $IMAGE_NAME:$MAJOR_MINOR_PATCH
      docker push $IMAGE_NAME:$MAJOR_MINOR
      docker push $IMAGE_NAME:$MAJOR
- "@semantic-release/github"
